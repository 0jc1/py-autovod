# This is the default file for streamers. Create a new file with the name of the streamer you want to record (e.g: asmongold.ini)

[source]
# Options: twitch, kick, youtube
stream_source = twitch

# Enable this to fetch additional metadata from the Twitch API. API_URL must be set to a valid API URL.
#api_calls = false

# API for fetching stream metadata (e.g: https://example.com/info/)
#api_url = 

[upload]

upload = false

# Options: youtube, rclone, restream
service = youtube

# If you want to save the non-empty video that failed to upload, set this to true
save_on_fail = false


[clipception]

enabled = true

[streamlink]
# Options: worst, 360p, 480p, 720p, 720p60, 1080p60, best
quality = best

# Options to pass to streamlink (https://streamlink.github.io/cli.html#twitch)
flags = --twitch-disable-ads

# Options: none, error, warning, info, debug, trace, all
logs = error

[video]
# Notice: YouTube has a upload limit of 12 hours per video
duration = 12:00:00

# If you want to split the video into parts, set this to true (if enabled, VIDEO_DURATION is ignored)
split_into_parts = false

# Set the duration of each part (XX:XX:XX)
split_duration = 06:00:00

[youtube]
# Available variables for title and playlist:
# {streamer_name} - The name of the streamer
# {date} - The current date (day-month-year)
title = {streamer_name} - {date}
description = Uploaded using https://github.com/0jc1/py-autovod

# Options: unlisted, private, public
visibility = unlisted

playlist = {streamer_name} VODs

[rclone]

# Rclone remote to upload to
remote = remote-name

# Directory to upload to
directory = 

# Don't use spaces in the filename, use dashes or underscores instead
filename = {streamer_name}_{date}
fileext = mkv

[local]
# Should the recorded stream be saved locally?
# If set to false, files will be automatically deleted after upload
save_locally = true

# File extension of output file
extension = mp4

[encoding]
# Re-encodes the stream to a desired codec and quality using ffmpeg
# This can be useful if you want to save space on your remote
# Only recommended if you have a high-end server
re_encode = false

# Options: libx265, libvpx-vp9, libaom-av1 (https://ffmpeg.org/ffmpeg-codecs.html)
codec = libx265

# Options: 0-51 (lower is better quality, but larger file size)
# See: https://slhck.info/video/2017/02/24/crf-guide.html
crf = 25

# Options: ultrafast, superfast, veryfast, faster, fast, medium, slow, slower, veryslow
# See: https://trac.ffmpeg.org/wiki/Encode/H.265
preset = medium

# Options: none, error, warning, info, debug, trace, all
log = error

# This will force 1080p output
# extra_args = -vf "scale=-2:1080"
